** 3.1 Getting started

For the first query E<> P.s3 witch means that there exist a possible future where P.s3 holds. The result is that the property is satisfied witch is true since there is a possible sequence of state transitions leading form the initial state to s3.
An example sequence : S0 -> S1 -> S3

For the second query A<> P.s3 witch means that all possible sequence of states that eventually leads to P.s3. The property is not satisfied since there is no way to ensure that there is such a sequence. This is due to the fact that there is nothing forcing the states to change.
An example sequence: S0     The state machine will stay in S0 for infinity. 

** 3.2 Fisher 1
For this assignment we try to predict the verification time for fisher with n = 12. We used a android phone to measure time since uppaal doesn't report it.

- n : 8     1s  
- n : 9     2s
- n : 10    6s
- n : 11    20s  
- n : 12    120s (Our guess) 

It seems to be a factorial increment of time.

** 3.3 Fisher 2
If m < k then the mutex requirement will not be satisfied. An example of this is the sequence:

/(-,-,-,-) -> (req,-,-,-) -> (req,req,-,-) -> (wait,req,-,-) -> (cs,req,-,-) -> (cs,wait,-,-) -> (cs,cs,-,-)/

If m >= k then mutex requirement will be satisfied.

*** 3.4 Traffic Light Controller
The Traffic light timed automata have three templates. Two for the traffic lights and one controller. The reason that we chose to have two templates for the traffic light instead of one is because there is a slight difference between north and south compared to east and west. 

We have a integer called transfer that behaves like a four byte number. We use this to define seven states of the system, north, south, east, west, north-south, east-west or none. To do this each traffic direction is initialized with a id, 1,2,4,8; these are then added and subtracted form transfer when a light goes to and from green respectively. This enables us to define states be checking the value of transfer, if it's less the 4 for example the state is 1&2. Less then 2 the state is 1 and so on.

*** Traffic Light Template 
The template has three states, /idle/ (red light), /wait/ (there are cars waiting) and /Green/ (green light). To force the system to transit state the edge form /wait/ to /Green/ is triggered be a channel form the controller while /Green/ has a timed invariant. 

*** Controller 
The controller has to states that it switches between on a timed interval. The edges form NS to WE triggers one channel for the WE traffic light and vice versa for the edge form WE to NS but with an other channel.

** 3.5 Alternating Bit Protocol 
The ABP (Alternating Bit protocol) system have three components, sender, receiver and a channel.

*** Sender 
The sender creates a message that it tries to send trough the channel to the receiver. It has four nodes, /mode zero, new message, mode one/ and a /transition node/ between mode one and zero. From /mode zero/ the sender can move to /new message/. In new message the sender waits for a acknowledgment form the receiver, this can be ether one or zero. If zero the sender transitions to /mode one/. Otherwise it re-transmits the message with state 0. In mode one the sender awaits an other acknowledgment form the receiver. If one the sender goes to /mode zero/. Otherwise it re-transmits the message with state 1.

In /new message/ and /mode one (the transition node)/ the sender can time out. If so it re-transmits the message with 0 and 1 respectively.

*** Receiver
The receiver receives a message form the channel. It has four nodes, /mode zero, mode one and two transition nodes/. Form /mode zero/ the receiver can move to /mode one/ tough a transition node or back to it self trough a transition node. In this case it re-transmits a acknowledgment with 1. In /mode one/ the receiver can move to /mode zero/ trough a transition node or back to it self trough a transition node.

In /mode zero/ and /mode one/ the receives can time out. If so it re-transmits the message with 1 and 0 respectively.

When the receiver moves to /mode one/ it transmits an acknowledgment 0 to the channel and if it moves to /mode zero/ it transmits an acknowledgment 1 to the channel.

 
*** Channel 
The channel has to nodes. From the first it has four edges to move to the second. They are sensitive to the receivers acknowledgment and the senders message. There are also four edges form the second node to the first. They activate the acknowledgment in the sender and the state change in the receiver.

